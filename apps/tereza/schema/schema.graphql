type Query {
  """Fetches an object that has globally unique ID among all types"""
  node(
    """The globally unique ID among all types"""
    id: ID!
  ): Node
  me: Me!
  journal: QueryJournal
  zettel: QueryZettel
}

type Mutation {
  journal: MutationJournal
  zettel: MutationZettel
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum JournalSummaryKeyEnum {
  TODAY
  YESTERDAY
  LAST_WEEK
  LAST_MONTH
  LAST_YEAR
  LAST_FIVE_YEARS
  LAST_TEN_YEARS
}

enum SortConnectionJournalEnum {
  DATE_DESC
}

enum SortConnectionJournalHistoryEnum {
  NEWEST
}

enum SortConnectionReferenceEnum {
  CREATED_AT_DESC
}

enum SortConnectionZettelNoteEnum {
  CREATED_AT_DESC
}

"""
An object, that can be fetched by the globally unique ID among all types.
"""
interface Node {
  """The globally unique ID among all types."""
  id: ID!
}

type DeleteNoteResponse {
  deleted: Boolean!
}

type Journal implements Node {
  """The globally unique ID among all types"""
  id: ID!
  date: String!
  text: String!
  history(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionJournalHistoryEnum = NEWEST
  ): JournalHistoryConnection
}

"""A connection to a list of items."""
type JournalConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [JournalEdge!]!
}

"""An edge in a connection."""
type JournalEdge {
  """The item at the end of the edge"""
  node: Journal!

  """A cursor for use in pagination"""
  cursor: String!
}

type JournalHistory {
  id: String!
  text: String!
}

"""A connection to a list of items."""
type JournalHistoryConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [JournalHistoryEdge!]!
}

"""An edge in a connection."""
type JournalHistoryEdge {
  """The item at the end of the edge"""
  node: JournalHistory!

  """A cursor for use in pagination"""
  cursor: String!
}

type JournalQuestion {
  question: String!
  enabled: Boolean!
}

type JournalQuestions {
  system: [JournalQuestion!]!
  user: [JournalQuestion!]
  daily(date: String!): [JournalQuestion!]!
}

type JournalStats {
  count: Int!
  initialDate: String!
  maxStreak: Int!
  missingDatesCount: Int!
  groupDates: [JournalStatsGroupDate!]!
}

type JournalStatsGroupDate {
  month: String!
  days: [JournalStatsGroupDay!]!
}

type JournalStatsGroupDay {
  day: String!
  missing: Boolean!
}

type JournalSummaryItem {
  key: JournalSummaryKeyEnum!
  journal: Journal!
}

type Me {
  id: ID!
}

type MutationJournal {
  saveJournal(journal: JournalInput!): Journal!
  saveQuestions(questions: [JournalQuestionInput!]!): [JournalQuestion!]!
}

type MutationZettel {
  deleteNote(id: ID!): DeleteNoteResponse!
  saveNote(note: ZettelNoteInput!): ZettelNote!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type QueryJournal {
  journal(date: String!): Journal
  journalDay(date: String!): Journal
  journals(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionJournalEnum = DATE_DESC
  ): JournalConnection
  stats(today: String!): JournalStats
  summary(date: String!): [JournalSummaryItem!]!
  questions: JournalQuestions
}

type QueryZettel {
  references(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionReferenceEnum = CREATED_AT_DESC
  ): ReferenceConnection
  insights(content: String!): ZettelInsight!
  note(id: ID!): ZettelNote
  notes(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionZettelNoteEnum = CREATED_AT_DESC
  ): ZettelNoteConnection
  search(text: String!, limit: Int): [ZettelNote!]!
}

type Reference {
  id: ID!
  reference: String!
  notes: [ZettelNote!]!
}

"""A connection to a list of items."""
type ReferenceConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReferenceEdge!]!
}

"""An edge in a connection."""
type ReferenceEdge {
  """The item at the end of the edge"""
  node: Reference!

  """A cursor for use in pagination"""
  cursor: String!
}

type Tag {
  id: ID!
  name: String!
  notes: [ZettelNote!]!
}

type ZettelInsight {
  title: String
  description: String
  tags: [String!]
  division: [String!]
  insights: [String!]
}

type ZettelNote implements Node {
  """The globally unique ID among all types"""
  id: ID!
  createdAt: String!
  title: String
  description: String
  content: String
  embedding: [Float!]
  insights: [String!]
  division: [String!]
  references: [Reference!]!
  tags: [Tag!]!
}

"""A connection to a list of items."""
type ZettelNoteConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ZettelNoteEdge!]!
}

"""An edge in a connection."""
type ZettelNoteEdge {
  """The item at the end of the edge"""
  node: ZettelNote!

  """A cursor for use in pagination"""
  cursor: String!
}

input JournalHistoryConnectionInput {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoInput!

  """Information to aid in pagination."""
  edges: [JournalHistoryEdgeInput!]!
}

input JournalHistoryEdgeInput {
  """The item at the end of the edge"""
  node: JournalHistoryInput!

  """A cursor for use in pagination"""
  cursor: String!
}

input JournalHistoryInput {
  id: String!
  text: String!
}

input JournalInput {
  date: String!
  text: String!
  history: JournalHistoryConnectionInput
}

input JournalQuestionInput {
  question: String!
  enabled: Boolean!
}

input PageInfoInput {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input ZettelNoteInput {
  id: ID
  createdAt: String
  title: String
  description: String
  tags: [String!]
  content: String
  insights: [String!]
  division: [String!]
  references: [String!]
}