type Query {
  """Fetches an object that has globally unique ID among all types"""
  node(
    """The globally unique ID among all types"""
    id: ID!
  ): Node
  me: Me!
  journal: QueryJournal
  zettel: QueryZettel
}

type Mutation {
  journal: MutationJournal
  zettel: MutationZettel
}

enum JournalSummaryKeyEnum {
  TODAY
  YESTERDAY
  LAST_WEEK
  LAST_MONTH
  LAST_YEAR
  LAST_TWO_YEARS
  LAST_FIVE_YEARS
  LAST_TEN_YEARS
}

enum SortConnectionJournalEnum {
  DESC
}

"""
An object, that can be fetched by the globally unique ID among all types.
"""
interface Node {
  """The globally unique ID among all types."""
  id: ID!
}

type Journal implements Node {
  """The globally unique ID among all types"""
  id: ID!
  date: String!
  text: String!
}

"""A connection to a list of items."""
type JournalConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [JournalEdge!]!
}

"""An edge in a connection."""
type JournalEdge {
  """The item at the end of the edge"""
  node: Journal!

  """A cursor for use in pagination"""
  cursor: String!
}

type JournalStats {
  count: Int!
  initialDate: String!
  maxStreak: Int!
  missingDatesCount: Int!
  groupDates: [JournalStatsGroupDate!]!
}

type JournalStatsGroupDate {
  month: String!
  days: [JournalStatsGroupDay!]!
}

type JournalStatsGroupDay {
  day: String!
  missing: Boolean!
}

type JournalSummaryItem {
  key: JournalSummaryKeyEnum!
  journal: Journal!
}

type Me {
  id: ID!
  allowed: Boolean
}

type MutationJournal {
  saveJournal(journal: JournalInput): Journal
}

type MutationZettel {
  saveNote(note: ZettelNoteInput!): ZettelNote!
  deleteNote(id: ID!): Boolean!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type QueryJournal {
  journalDay(date: String!): Journal
  journals(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionJournalEnum = DESC
  ): JournalConnection
  stats(today: String!): JournalStats
  summary(date: String!): [JournalSummaryItem!]!
}

type QueryZettel {
  note(id: ID!): ZettelNote!
  notes: [ZettelNote!]!
  insights(note: ZettelNoteInput!): [ZettelInsight!]!
}

type ZettelInsight {
  text: String
}

type ZettelNote implements Node {
  """The globally unique ID among all types"""
  id: ID!
  title: String!
  group: String!
  description: String
  tags: [String!]!
  content: String
}

input JournalInput {
  date: String!
  text: String!
}

input ZettelNoteInput {
  id: ID
  title: String!
  group: String
  description: String
  tags: [String!]
  content: String
}